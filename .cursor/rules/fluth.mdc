---
alwaysApply: true
---

# Fluth 文档项目专属规则

## 项目概述

本项目是 fluth 库的官方文档，使用 VitePress 构建，支持中英文双语。fluth 源码通过符号链接 `source/` 引用，用于生成准确的 API 文档和示例。

## 文档结构规范

### 1. 目录组织

```
docs/
├── .vitepress/          # VitePress 配置
│   ├── config.mts        # 主配置文件
│   ├── config.cn.mts     # 中文配置
│   ├── config.en.mts     # 英文配置
│   └── theme/            # 主题定制
├── cn/                   # 中文文档
│   ├── guide/            # 指南
│   ├── api/              # API 文档
│   └── index.md          # 中文首页
├── en/                   # 英文文档
│   ├── guide/            # 指南
│   ├── api/              # API 文档
│   └── index.md          # 英文首页
├── components/           # Vue 组件
└── public/               # 静态资源
```

### 2. 文件命名规范

- 文档文件使用小写字母和连字符：`quick-start.md`
- API 文档使用驼峰命名：`createStream.md`
- 图片文件使用描述性名称：`combine.drawio.svg`
- 组件文件使用小写：`observable.vue`

## 多语言支持规范

### 1. 内容同步

- **必须保持中英文内容同步**：每次更新中文文档时，必须同时更新对应的英文文档
- **结构一致性**：中英文文档的目录结构、文件名、章节标题层级必须保持一致
- **导航同步**：VitePress 配置中的导航和侧边栏必须在两种语言中保持对应

### 2. 翻译质量

- 技术术语保持一致性，建立术语表
- 代码示例中的注释需要翻译
- 变量名和函数名保持英文原样
- 确保翻译的准确性和专业性

### 3. 配置管理

- 在 `config.cn.mts` 和 `config.en.mts` 中维护对应的配置
- 确保链接路径正确（`/cn/` 和 `/en/` 前缀）
- 保持导航结构的一致性

## 源码引用规范

### 1. 符号链接管理

- `source/` 目录是指向 fluth 项目的符号链接
- 该目录已在 `.gitignore` 中忽略，不会提交到仓库
- 开发者需要手动创建符号链接：`ln -s ../fluth ./source`
- `source/` 目录结构：
  - `source/src/`：fluth 源码的具体实现
  - `source/test/`：测试用例，可从中了解 fluth 的使用方式

### 2. API 文档生成

- 从 `source/src/` 中的 TypeScript 源码提取 API 信息
- 参考 `source/test/` 中的测试用例了解实际使用方式和边界情况
- 确保示例代码与源码实现保持一致
- 定期检查源码更新，同步文档内容

### 3. 代码示例

- **编写前必读源码和测试**：在编写任何 API 文档或示例之前，必须：
  - 阅读 `source/src/` 中相应的 TypeScript 源码，确保理解实际实现
  - 参考 `source/test/` 中的测试用例，了解正确的使用方式和边界情况
- 所有代码示例必须可执行且正确
- 优先使用真实的 fluth API
- 提供完整的导入语句
- 包含错误处理示例

## API 文档标准模板

### 1. 基础 API 文档结构

````markdown
# API 名称

简短描述（1-2 句话）

## 类型定义

```typescript
// 完整的 TypeScript 类型定义
```

## 参数说明

- `param1` (类型): 参数描述
- `param2` (可选): 可选参数描述

## 返回值

返回值的详细说明

## 详情

- 详细说明

## 示例

通过测试用例提取一到两个使用示例

```typescript
import { $, operatorName } from 'fluth'
// 完整示例
```
````

## VitePress 配置规范

### 1. 配置文件结构

- `config.mts`：主配置，包含基础设置和多语言配置
- `config.cn.mts`：中文特定配置
- `config.en.mts`：英文特定配置

### 2. 主题配置

- 保持品牌一致性（logo、颜色等）
- 配置合适的社交链接
- 设置正确的 GitHub 仓库链接

### 3. 构建配置

- 基础路径设置：`base: "/fluth-doc/"`
- 正确配置静态资源路径
- 优化构建性能

## 内容编写规范

**所有的英文字符必须用\`\`包裹，比如 `pending`**

### 1. 文档结构

- 使用清晰的标题层级（H1-H6）
- 提供目录导航
- 包含代码示例和解释
- 添加相关链接和参考

### 2. 代码示例

```typescript
// ✅ 好的示例：完整且可执行（基于实际 fluth API）
import { $ } from 'fluth'

const stream$ = $('hello')
  .then((value) => value.toUpperCase())
  .then((result) => {
    console.log(result) // 输出: HELLO
  })
```

```typescript
// ❌ 避免：不完整的示例
const stream$ = $('hello').then(fn)
```

### 3. 文档质量

- 提供清晰的概念解释
- 包含实际使用场景
- 添加注意事项和最佳实践
- 提供故障排除指南

## 组件文档规范

### 1. Vue 组件文档

- 组件文件放在 `docs/components/` 目录
- 使用 `<script setup>` 语法
- 组件名称使用 PascalCase
- 提供组件的使用说明和示例

### 2. 静态资源管理

- 图片文件放在 `docs/public/` 目录
- 优先使用 SVG 格式的矢量图
- 图片命名使用描述性名称
- 确保图片大小适中，不影响加载性能

## 开发工作流

### 1. 本地开发

```bash
# 启动开发服务器
npm run docs:dev

# 构建文档
npm run docs:build

# 预览构建结果
npm run docs:preview
```

### 2. 内容更新流程

1. **阅读源码和测试**：
   - 阅读 `source/src/` 中相关的 TypeScript 源码
   - 参考 `source/test/` 中的测试用例了解使用方式
2. 更新中文文档
3. 同步更新英文文档
4. 检查导航配置
5. 验证链接有效性
6. 测试构建结果
7. 提交更改
